#!/bin/bash
# üìÑ SCRIPT 3: initialize_business_data_fixed.sh
# Inicializa las configuraciones de negocio en el sistema

echo "üîß INICIALIZANDO DATOS DE NEGOCIO"
echo "================================="
echo "‚è∞ $(date)"
echo ""

API_BASE="http://localhost:8000"

# Funci√≥n para hacer request y mostrar resultado
make_request() {
    local method=$1
    local url=$2
    local data=$3
    local description=$4
    
    echo "üìù $description"
    echo "   URL: $method $url"
    
    if [ -n "$data" ]; then
        response=$(curl -s -X "$method" "$url" \
            -H "Content-Type: application/json" \
            -d "$data" \
            -w "\nHTTP_STATUS:%{http_code}")
    else
        response=$(curl -s -X "$method" "$url" \
            -w "\nHTTP_STATUS:%{http_code}")
    fi
    
    # Extraer status code
    http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
    response_body=$(echo "$response" | grep -v "HTTP_STATUS:")
    
    if [ "$http_status" = "200" ] || [ "$http_status" = "201" ]; then
        echo "   ‚úÖ Status: $http_status"
        echo "   üìÑ Response: $response_body"
    else
        echo "   ‚ùå Status: $http_status"
        echo "   üìÑ Error: $response_body"
    fi
    echo ""
}

echo "üåê PASO 1: VERIFICANDO CONECTIVIDAD"
echo "==================================="

# Verificar que el sistema est√© funcionando
echo "üîç Verificando gateway..."
if curl -s -f "$API_BASE/health" > /dev/null 2>&1; then
    echo "‚úÖ Gateway responde"
else
    echo "‚ùå Gateway no responde"
    echo "üí° Ejecuta primero: ./fix_build_errors.sh"
    exit 1
fi

echo "üîç Verificando business rules service..."
if curl -s -f "http://localhost:8003/health" > /dev/null 2>&1; then
    echo "‚úÖ Business rules service responde"
else
    echo "‚ùå Business rules service no responde"
    echo "üí° Verifica: docker-compose logs business-rules-service"
    exit 1
fi

echo ""
echo "üîß PASO 2: INICIALIZANDO CONFIGURACIONES"
echo "========================================"

make_request "POST" "$API_BASE/configurations/initialize" "" "Inicializando configuraciones por defecto"

echo ""
echo "üéÅ PASO 3: AGREGANDO DESCUENTOS POR CANTIDAD"
echo "============================================"

# Descuento 5% para 10+ unidades
descuento_10='{
    "key": "descuento_10",
    "name": "Descuento 10+ unidades",
    "description": "5% de descuento para 10 o m√°s unidades",
    "value": "5.0",
    "type": "percentage",
    "category": "descuentos_cantidad"
}'

make_request "POST" "$API_BASE/configurations" "$descuento_10" "Creando descuento 10+ unidades (5%)"

# Descuento 10% para 20+ unidades
descuento_20='{
    "key": "descuento_20",
    "name": "Descuento 20+ unidades", 
    "description": "10% de descuento para 20 o m√°s unidades",
    "value": "10.0",
    "type": "percentage",
    "category": "descuentos_cantidad"
}'

make_request "POST" "$API_BASE/configurations" "$descuento_20" "Creando descuento 20+ unidades (10%)"

# Descuento 15% para 50+ unidades
descuento_50='{
    "key": "descuento_50",
    "name": "Descuento 50+ unidades",
    "description": "15% de descuento para 50 o m√°s unidades", 
    "value": "15.0",
    "type": "percentage",
    "category": "descuentos_cantidad"
}'

make_request "POST" "$API_BASE/configurations" "$descuento_50" "Creando descuento 50+ unidades (15%)"

echo ""
echo "üìä PASO 4: VERIFICANDO CONFIGURACIONES CARGADAS"
echo "==============================================="

echo "üìù Obteniendo todas las configuraciones..."
response=$(curl -s "$API_BASE/configurations" -w "\nHTTP_STATUS:%{http_code}")
http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
response_body=$(echo "$response" | grep -v "HTTP_STATUS:")

if [ "$http_status" = "200" ]; then
    echo "‚úÖ Status: $http_status"
    echo "üìÑ Configuraciones encontradas:"
    echo "$response_body"
else
    echo "‚ùå Status: $http_status"
    echo "üìÑ Error: $response_body"
fi
echo ""

echo ""
echo "üßÆ PASO 5: VERIFICANDO PAR√ÅMETROS DE C√ÅLCULO"
echo "============================================"

make_request "GET" "$API_BASE/calculations/params" "" "Obteniendo par√°metros de c√°lculo actuales"

echo ""
echo "üß™ PASO 6: PROBANDO ACTUALIZACI√ìN DE CONFIGURACI√ìN"
echo "=================================================="

# Probar actualizaci√≥n de una configuraci√≥n
echo "üìù Actualizando porcentaje de ganancia a 280%..."

# Nota: La API puede requerir par√°metros de query en lugar de JSON body
update_response=$(curl -s -X PUT "$API_BASE/configurations/porc_ganancia?new_value=280&user_id=admin&reason=Test%20de%20inicializacion" \
    -H "Content-Type: application/json" \
    -w "\nHTTP_STATUS:%{http_code}")

http_status=$(echo "$update_response" | grep "HTTP_STATUS:" | cut -d: -f2)
response_body=$(echo "$update_response" | grep -v "HTTP_STATUS:")

if [ "$http_status" = "200" ]; then
    echo "‚úÖ Configuraci√≥n actualizada exitosamente"
    echo "üìÑ Response: $response_body"
else
    echo "‚ùå Error actualizando configuraci√≥n (Status: $http_status)"
    echo "üìÑ Error: $response_body"
fi

echo ""
echo "üìà PASO 7: VERIFICANDO HIST√ìRICO DE CAMBIOS"
echo "==========================================="

make_request "GET" "$API_BASE/configurations/porc_ganancia/history" "" "Obteniendo hist√≥rico de cambios"

echo ""
echo "üéâ INICIALIZACI√ìN COMPLETADA"
echo "============================"

echo "‚úÖ Pasos ejecutados:"
echo "  ‚Ä¢ Configuraciones por defecto cargadas"
echo "  ‚Ä¢ Descuentos por cantidad configurados"
echo "  ‚Ä¢ Par√°metros de c√°lculo verificados"
echo "  ‚Ä¢ Test de actualizaci√≥n realizado"
echo "  ‚Ä¢ Hist√≥rico de cambios verificado"

echo ""
echo "üåê URLs de verificaci√≥n manual:"
echo "  ‚Ä¢ Gateway: http://localhost:8000"
echo "  ‚Ä¢ Configuraciones: http://localhost:8000/configurations"
echo "  ‚Ä¢ Par√°metros: http://localhost:8000/calculations/params"
echo "  ‚Ä¢ Documentaci√≥n: http://localhost:8000/docs"
echo "  ‚Ä¢ Frontend: http://localhost:3000"

echo ""
echo "üöÄ SIGUIENTE PASO:"
echo "  ./test_complete_system.sh  # Para testing completo"
echo "  O continuar con frontend y preparar para GitHub"